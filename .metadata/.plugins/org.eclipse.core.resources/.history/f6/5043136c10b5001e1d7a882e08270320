
13_EMBEDDED_PIN_READ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000198  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800032c  08000334  00010334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800032c  0800032c  00010334  2**0
                  CONTENTS
  4 .ARM          00000000  0800032c  0800032c  00010334  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800032c  08000334  00010334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000334  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000334  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010334  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010364  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000151  00000000  00000000  000103a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000008e  00000000  00000000  000104f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  000105d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ae9  00000000  00000000  000105fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000549  00000000  00000000  000120e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000075f5  00000000  00000000  0001262f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000058  00000000  00000000  00019c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00019c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000314 	.word	0x08000314

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000314 	.word	0x08000314

080001d4 <main>:
#include <stdio.h>
#include <stdint.h>

// use a button (pinc 6) to turn on a led (pinc 8)

int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b087      	sub	sp, #28
 80001d8:	af00      	add	r7, sp, #0
	// enabling the peripheral clock to GPIOC
	// RCC address -> 0x40023800
	// AHB1EN address -> 0x40023800 + 0x30
	// bit 2 to enable GPIOC clock
	uint32_t *RCC_AHB1ENR = (uint32_t *)(0x40023800 + 0x30); // have to typecast that is a pointer
 80001da:	4b22      	ldr	r3, [pc, #136]	; (8000264 <main+0x90>)
 80001dc:	617b      	str	r3, [r7, #20]
	*RCC_AHB1ENR = *RCC_AHB1ENR  | (1 << 2);
 80001de:	697b      	ldr	r3, [r7, #20]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f043 0204 	orr.w	r2, r3, #4
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	601a      	str	r2, [r3, #0]

	// GPIOC address -> 0x40020800
	// GPIO port mode register -> 0x40020800 + 0x00
	// pin 8 -> bit 17 and 16 : value 01 to output
	// pin 6 -> bit 13 and 12 : value 00 to input
	uint32_t *GPIO_mode = (uint32_t *)(0x40020800 + 0x00);
 80001ea:	4b1f      	ldr	r3, [pc, #124]	; (8000268 <main+0x94>)
 80001ec:	613b      	str	r3, [r7, #16]
	*GPIO_mode &= ~(1 << 17); // clear
 80001ee:	693b      	ldr	r3, [r7, #16]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80001f6:	693b      	ldr	r3, [r7, #16]
 80001f8:	601a      	str	r2, [r3, #0]
	*GPIO_mode |=  (1 << 16);  // set
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000202:	693b      	ldr	r3, [r7, #16]
 8000204:	601a      	str	r2, [r3, #0]


	// GPIOC port pull-up/pull-down register ->  0x40020800 + 0x0C
	// set pull up to pinc 6 -> bit 13 and 12 -> 01
	uint32_t *GPIO_port_pull = (uint32_t *)(0x40020800 + 0x0C);
 8000206:	4b19      	ldr	r3, [pc, #100]	; (800026c <main+0x98>)
 8000208:	60fb      	str	r3, [r7, #12]
	*GPIO_port_pull &= ~(1 << 13);
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
	*GPIO_port_pull |=  (1 << 12);
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	601a      	str	r2, [r3, #0]


	// GPIOC port input data register -> 0x40020800 + 0x10
	// bit 6 -> read-only
	uint32_t *GPIO_input = (uint32_t *)(0x40020800 + 0x10);
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <main+0x9c>)
 8000224:	60bb      	str	r3, [r7, #8]


	// GPIO port output data register -> 0x40020800 + 0x14
	// pin 8 -> bit 8
	uint32_t *GPIO_output = (uint32_t *)(0x40020800 + 0x14);
 8000226:	4b13      	ldr	r3, [pc, #76]	; (8000274 <main+0xa0>)
 8000228:	607b      	str	r3, [r7, #4]
	*GPIO_output |= (1 << 8);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	601a      	str	r2, [r3, #0]


	while(1){

		uint8_t pinStatus = *GPIO_input & (1<<6);
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000240:	70fb      	strb	r3, [r7, #3]
		if(!pinStatus){
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d106      	bne.n	8000256 <main+0x82>
			*GPIO_output |= (1 << 8);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	e7ef      	b.n	8000236 <main+0x62>
		}else{
			*GPIO_output &= ~(1 << 8);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
	while(1){
 8000262:	e7e8      	b.n	8000236 <main+0x62>
 8000264:	40023830 	.word	0x40023830
 8000268:	40020800 	.word	0x40020800
 800026c:	4002080c 	.word	0x4002080c
 8000270:	40020810 	.word	0x40020810
 8000274:	40020814 	.word	0x40020814

08000278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800027c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480c      	ldr	r0, [pc, #48]	; (80002b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490d      	ldr	r1, [pc, #52]	; (80002b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0a      	ldr	r4, [pc, #40]	; (80002c4 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a6:	f000 f811 	bl	80002cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ff93 	bl	80001d4 <main>

080002ae <LoopForever>:

LoopForever:
  b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   r0, =_estack
 80002b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002bc:	08000334 	.word	0x08000334
  ldr r2, =_sbss
 80002c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c4:	2000001c 	.word	0x2000001c

080002c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC_IRQHandler>
	...

080002cc <__libc_init_array>:
 80002cc:	b570      	push	{r4, r5, r6, lr}
 80002ce:	4d0d      	ldr	r5, [pc, #52]	; (8000304 <__libc_init_array+0x38>)
 80002d0:	4c0d      	ldr	r4, [pc, #52]	; (8000308 <__libc_init_array+0x3c>)
 80002d2:	1b64      	subs	r4, r4, r5
 80002d4:	10a4      	asrs	r4, r4, #2
 80002d6:	2600      	movs	r6, #0
 80002d8:	42a6      	cmp	r6, r4
 80002da:	d109      	bne.n	80002f0 <__libc_init_array+0x24>
 80002dc:	4d0b      	ldr	r5, [pc, #44]	; (800030c <__libc_init_array+0x40>)
 80002de:	4c0c      	ldr	r4, [pc, #48]	; (8000310 <__libc_init_array+0x44>)
 80002e0:	f000 f818 	bl	8000314 <_init>
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	10a4      	asrs	r4, r4, #2
 80002e8:	2600      	movs	r6, #0
 80002ea:	42a6      	cmp	r6, r4
 80002ec:	d105      	bne.n	80002fa <__libc_init_array+0x2e>
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f4:	4798      	blx	r3
 80002f6:	3601      	adds	r6, #1
 80002f8:	e7ee      	b.n	80002d8 <__libc_init_array+0xc>
 80002fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fe:	4798      	blx	r3
 8000300:	3601      	adds	r6, #1
 8000302:	e7f2      	b.n	80002ea <__libc_init_array+0x1e>
 8000304:	0800032c 	.word	0x0800032c
 8000308:	0800032c 	.word	0x0800032c
 800030c:	0800032c 	.word	0x0800032c
 8000310:	08000330 	.word	0x08000330

08000314 <_init>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr

08000320 <_fini>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

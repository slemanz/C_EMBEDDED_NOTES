#include <stdio.h>
#include <stdint.h>

// toggle led

typedef struct
{
	uint32_t gpioa_en		:1;
	uint32_t gpiob_en		:1;
	uint32_t gpioc_en		:1;
	uint32_t gpiod_en		:1;
	uint32_t gpioe_en		:1;
	uint32_t reserved1		:2;
	uint32_t gpioh_en		:1;
	uint32_t reserved2		:4;
	uint32_t crc_en			:1;
	uint32_t reserved3		:8;
	uint32_t dma1_en		:1;
	uint32_t dma2_en		:1;
	uint32_t reserved3		:9;
}RCC_AHB1ENR_t;


typedef struct
{
	uint32_t pin_0			:2;
	uint32_t pin_1			:2;
	uint32_t pin_2			:2;
	uint32_t pin_3			:2;
	uint32_t pin_4			:2;
	uint32_t pin_5			:2;
	uint32_t pin_6			:2;
	uint32_t pin_7			:2;
	uint32_t pin_8			:2;
	uint32_t pin_9			:2;
	uint32_t pin_10			:2;
	uint32_t pin_11			:2;
	uint32_t pin_12			:2;
	uint32_t pin_13			:2;
	uint32_t pin_14			:2;
	uint32_t pin_15			:2;
}GPIOx_MODE_t;


typedef struct
{
	uint32_t pin_0			:1;
	uint32_t pin_1			:1;
	uint32_t pin_2			:1;
	uint32_t pin_3			:1;
	uint32_t pin_4			:1;
	uint32_t pin_5			:1;
	uint32_t pin_6			:1;
	uint32_t pin_7			:1;
	uint32_t pin_8			:1;
	uint32_t pin_9			:1;
	uint32_t pin_10			:1;
	uint32_t pin_11			:1;
	uint32_t pin_12			:1;
	uint32_t pin_13			:1;
	uint32_t pin_14			:1;
	uint32_t pin_15			:1;
	uint32_t reserved		:16;
}GPIOx_ODR_t

int main(void) {

	// will be used the GPIOC -> PIN 8
	// enabling the peripheral clock
	// RCC address -> 0x40023800
	// AHB1EN address -> 0x40023800 + 0x30
	// bit 2 to enable GPIOC clock
	uint32_t *RCC_AHB1ENR = (uint32_t *)(0x40023800 + 0x30); // have to typecast that is a pointer
	//*RCC_AHB1ENR = 0x04; // 0x04 == 0b0100
	*RCC_AHB1ENR = *RCC_AHB1ENR  | (1 << 2);



	// GPIOC address -> 0x40020800
	// GPIO port mode register -> 0x40020800 + 0x00
	// pin 8 -> bit 17 and 16 : value 01 to output
	uint32_t *GPIO_mode = (uint32_t *)(0x40020800 + 0x00);
	//*GPIO_mode = 0x0000 | (1 << 16);
	*GPIO_mode &= ~(1 << 17); // clear
	*GPIO_mode |= (1 << 16);  // set


	// GPIO port output data register -> 0x40020800 + 0x14
	// pin 8 ->
	uint32_t *GPIO_output = (uint32_t *)(0x40020800 + 0x14);
	*GPIO_output |= (1 << 8);

	while(1){
		*GPIO_output |= (1 << 8);
		for(uint32_t i = 0; i < 500000; i++);
		*GPIO_output &= ~(1 << 8);
		for(uint32_t i = 0; i < 500000; i++);
	}

	return 0;
}
